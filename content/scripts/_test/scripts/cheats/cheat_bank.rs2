[debugproc,bank]
if_close;
if (p_finduid(uid) = true) {
    @openbank;
} else {
    @please_finish;
}

[debugproc,bank_preset]
if_close;
if (p_finduid(uid) = true) {
    def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
    if ($choice = 2) {
        return;
    }
    inv_clear(bank);

    inv_add(bank, coins, ^max_32bit_int);
    inv_add(bank, christmas_cracker, 255);
    inv_add(bank, purple_partyhat, 255);
    inv_add(bank, red_partyhat, 255);
    inv_add(bank, white_partyhat, 255);
    inv_add(bank, blue_partyhat, 255);
    inv_add(bank, green_partyhat, 255);
    inv_add(bank, yellow_partyhat, 255);
    inv_add(bank, santa_hat, 255);
    inv_add(bank, halloweenmask_green, 255);
    inv_add(bank, halloweenmask_blue, 255);
    inv_add(bank, halloweenmask_red, 255);
    inv_add(bank, easter_egg, 255);
    inv_add(bank, pumpkin, 255);
    inv_add(bank, disk_of_returning, 255);
    inv_add(bank, half_full_wine_jug, 255);

    inv_add(bank, firerune, ^max_32bit_int);
    inv_add(bank, waterrune, ^max_32bit_int);
    inv_add(bank, airrune, ^max_32bit_int);
    inv_add(bank, earthrune, ^max_32bit_int);
    inv_add(bank, mindrune, ^max_32bit_int);
    inv_add(bank, bodyrune, ^max_32bit_int);
    inv_add(bank, deathrune, ^max_32bit_int);
    inv_add(bank, naturerune, ^max_32bit_int);
    inv_add(bank, chaosrune, ^max_32bit_int);
    inv_add(bank, lawrune, ^max_32bit_int);
    inv_add(bank, cosmicrune, ^max_32bit_int);
    inv_add(bank, bloodrune, ^max_32bit_int);
    inv_add(bank, soulrune, ^max_32bit_int);
    inv_add(bank, blankrune, ^max_32bit_int);

    inv_add(bank, air_talisman, 65535);
    inv_add(bank, earth_talisman, 65535);
    inv_add(bank, fire_talisman, 65535);
    inv_add(bank, water_talisman, 65535);
    inv_add(bank, body_talisman, 65535);
    inv_add(bank, mind_talisman, 65535);
    inv_add(bank, blood_talisman, 65535);
    inv_add(bank, chaos_talisman, 65535);
    inv_add(bank, cosmic_talisman, 65535);
    inv_add(bank, death_talisman, 65535);
    inv_add(bank, law_talisman, 65535);
    inv_add(bank, soul_talisman, 65535);
    inv_add(bank, nature_talisman, 65535);

    inv_add(bank, bronze_pickaxe, 255);
    inv_add(bank, iron_pickaxe, 255);
    inv_add(bank, steel_pickaxe, 255);
    inv_add(bank, mithril_pickaxe, 255);
    inv_add(bank, adamant_pickaxe, 255);
    inv_add(bank, rune_pickaxe, 255);

    inv_add(bank, clay, 65535);
    inv_add(bank, copper_ore, 65535);
    inv_add(bank, tin_ore, 65535);
    inv_add(bank, iron_ore, 65535);
    inv_add(bank, silver_ore, 65535);
    inv_add(bank, gold_ore, 65535);
    inv_add(bank, mithril_ore, 65535);
    inv_add(bank, adamantite_ore, 65535);
    inv_add(bank, runite_ore, 65535);
    inv_add(bank, coal, 65535);

    inv_add(bank, bronze_bar, 65535);
    inv_add(bank, iron_bar, 65535);
    inv_add(bank, steel_bar, 65535);
    inv_add(bank, silver_bar, 65535);
    inv_add(bank, gold_bar, 65535);
    inv_add(bank, mithril_bar, 65535);
    inv_add(bank, adamantite_bar, 65535);
    inv_add(bank, runite_bar, 65535);

    inv_add(bank, dragonshield_a, ^max_32bit_int);
    inv_add(bank, dragonshield_b, ^max_32bit_int);

    inv_add(bank, bones, ^max_32bit_int);
    inv_add(bank, bones_burnt, ^max_32bit_int);
    inv_add(bank, bat_bones, ^max_32bit_int);
    inv_add(bank, big_bones, ^max_32bit_int);
    inv_add(bank, wolf_bones, ^max_32bit_int);
    inv_add(bank, babydragon_bones, ^max_32bit_int);
    inv_add(bank, dragon_bones, ^max_32bit_int);

    inv_add(bank, vial_empty, ^max_32bit_int);
    inv_add(bank, vial_water, ^max_32bit_int);

    inv_add(bank, unidentified_guam, 255);
    inv_add(bank, unidentified_marrentill, 255);
    inv_add(bank, unidentified_tarromin, 255);
    inv_add(bank, unidentified_harralander, 255);
    inv_add(bank, unidentified_ranarr, 255);
    inv_add(bank, unidentified_irit, 255);
    inv_add(bank, unidentified_avantoe, 255);
    inv_add(bank, unidentified_kwuarm, 255);
    inv_add(bank, unidentified_cadantine, 255);
    inv_add(bank, unidentified_dwarf_weed, 255);
    inv_add(bank, unidentified_torstol, 255);
    inv_add(bank, unidentified_snake_weed, 255);
    inv_add(bank, unidentified_ardrigal, 255);
    inv_add(bank, unidentified_sito_foil, 255);
    inv_add(bank, unidentified_volencia_moss, 255);
    inv_add(bank, unidentified_rogues_purse, 255);
    inv_add(bank, unidentified_lantadyme, 255);

    inv_add(bank, unicorn_horn, 255);
    inv_add(bank, blue_dragon_scale, 255);
    inv_add(bank, eye_of_newt, 255);
    inv_add(bank, red_spiders_eggs, 255);
    inv_add(bank, limpwurt_root, 255);
    inv_add(bank, snape_grass, 255);
    inv_add(bank, white_berries, 255);
    inv_add(bank, wine_of_zamorak, 255);
    inv_add(bank, jangerberries, 255);

    inv_add(bank, bronze_axe, 255);
    inv_add(bank, iron_axe, 255);
    inv_add(bank, black_axe, 255);
    inv_add(bank, steel_axe, 255);
    inv_add(bank, mithril_axe, 255);
    inv_add(bank, adamant_axe, 255);
    inv_add(bank, rune_axe, 255);

    inv_add(bank, logs, 65535);
    inv_add(bank, oak_logs, 65535);
    inv_add(bank, willow_logs, 65535);
    inv_add(bank, maple_logs, 65535);
    inv_add(bank, yew_logs, 65535);
    inv_add(bank, magic_logs, 65535);

    inv_add(bank, lobster_pot, 255);
    inv_add(bank, net, 255);
    inv_add(bank, big_net, 255);
    inv_add(bank, fishing_rod, 255);
    inv_add(bank, fly_fishing_rod, 255);
    inv_add(bank, harpoon, 65535);
    inv_add(bank, fishing_bait, ^max_32bit_int);
    inv_add(bank, feather, ^max_32bit_int);

    inv_add(bank, shrimp, 65535);
    inv_add(bank, raw_shrimp, 65535);
    inv_add(bank, anchovies, 65535);
    inv_add(bank, raw_anchovies, 65535);
    inv_add(bank, sardine, 65535);
    inv_add(bank, raw_sardine, 65535);
    inv_add(bank, salmon, 65535);
    inv_add(bank, raw_salmon, 65535);
    inv_add(bank, trout, 65535);
    inv_add(bank, raw_trout, 65535);
    inv_add(bank, giant_carp, 65535);
    inv_add(bank, raw_giant_carp, 65535);
    inv_add(bank, cod, 65535);
    inv_add(bank, raw_cod, 65535);
    inv_add(bank, raw_herring, 65535);
    inv_add(bank, herring, 65535);
    inv_add(bank, raw_pike, 65535);
    inv_add(bank, pike, 65535);
    inv_add(bank, raw_mackerel, 65535);
    inv_add(bank, mackerel, 65535);
    inv_add(bank, raw_tuna, 65535);
    inv_add(bank, tuna, 65535);
    inv_add(bank, raw_bass, 65535);
    inv_add(bank, bass, 65535);
    inv_add(bank, raw_swordfish, 65535);
    inv_add(bank, swordfish, 65535);
    inv_add(bank, raw_lobster, 65535);
    inv_add(bank, lobster, 65535);
    inv_add(bank, raw_shark, 65535);
    inv_add(bank, shark, 65535);
    inv_add(bank, raw_mantaray, 65535);
    inv_add(bank, mantaray, 65535);
    inv_add(bank, raw_seaturtle, 65535);
    inv_add(bank, seaturtle, 65535);
    inv_add(bank, casket, ^max_32bit_int);

    inv_add(bank, chisel, 255);
    inv_add(bank, uncut_diamond, 65535);
    inv_add(bank, uncut_ruby, 65535);
    inv_add(bank, uncut_emerald, 65535);
    inv_add(bank, uncut_sapphire, 65535);
    inv_add(bank, uncut_opal, 65535);
    inv_add(bank, uncut_jade, 65535);
    inv_add(bank, uncut_red_topaz, 65535);
    inv_add(bank, uncut_dragonstone, 65535);
} else {
    @please_finish;
}

[debugproc,bank_f2p]
if_close;
if (p_finduid(uid) = true) {
    inv_clear(bank);

    inv_add(bank, rune_scimitar, 255);
    inv_add(bank, rune_2h_sword, 255);
    inv_add(bank, rune_sword, 255);
    inv_add(bank, rune_kiteshield, 255);
    inv_add(bank, rune_full_helm, 255);
    inv_add(bank, rune_platebody, 255);
    inv_add(bank, rune_platelegs, 255);
    inv_add(bank, rune_plateskirt, 255);
    inv_add(bank, rune_chainbody, 255);
    inv_add(bank, rune_med_helm, 255);
    inv_add(bank, adamant_kiteshield, 255);
    inv_add(bank, adamant_full_helm, 255);
    inv_add(bank, adamant_platebody, 255);
    inv_add(bank, adamant_platelegs, 255);
    inv_add(bank, adamant_plateskirt, 255);
    inv_add(bank, adamant_chainbody, 255);
    inv_add(bank, adamant_med_helm, 255);
    inv_add(bank, adamant_sq_shield, 255);
    inv_add(bank, amulet_of_strength, 255);
    inv_add(bank, amulet_of_power, 255);
    inv_add(bank, amulet_of_accuracy, 255);
    inv_add(bank, coif, 255);
    inv_add(bank, dragonhide_body, 255);
    inv_add(bank, dragonhide_chaps, 255);
    inv_add(bank, dragon_vambraces, 255);
    inv_add(bank, leather_boots, 255);
    inv_add(bank, oak_shortbow, 255);
    inv_add(bank, crossbow, 255);
    inv_add(bank, steel_arrow, ^max_32bit_int);
    inv_add(bank, bolt, ^max_32bit_int);
    inv_add(bank, staff_of_fire, 255);
    inv_add(bank, staff_of_earth, 255);
    inv_add(bank, staff_of_water, 255);
    inv_add(bank, staff_of_air, 255);
    inv_add(bank, amulet_of_magic, 255);
    inv_add(bank, bluewizhat, 255);
    inv_add(bank, wizards_robe, 255);
    inv_add(bank, blue_skirt, 255);
    inv_add(bank, blackwizhat, 255);
    inv_add(bank, black_robe, 255);
    inv_add(bank, black_skirt, 255);
    inv_add(bank, antidragonbreathshield, 255);
    inv_add(bank, lobster, ^max_32bit_int);
    inv_add(bank, swordfish, ^max_32bit_int);
    inv_add(bank, anchovie_pizza, ^max_32bit_int);
    inv_add(bank, strength4, ^max_32bit_int);
    inv_add(bank, airrune, ^max_32bit_int);
    inv_add(bank, firerune, ^max_32bit_int);
    inv_add(bank, deathrune, ^max_32bit_int);
    inv_add(bank, waterrune, ^max_32bit_int);
    inv_add(bank, earthrune, ^max_32bit_int);
    inv_add(bank, naturerune, ^max_32bit_int);
    inv_add(bank, mindrune, ^max_32bit_int);
    inv_add(bank, bodyrune, ^max_32bit_int);
    inv_add(bank, chaosrune, ^max_32bit_int);
    inv_add(bank, lawrune, ^max_32bit_int);
    inv_add(bank, orange_cape, 255);
    inv_add(bank, yellow_cape, 255);
    inv_add(bank, leather_gloves, 255);
    inv_add(bank, monkrobetop, 255);
    inv_add(bank, monkrobebottom, 255);
    inv_add(bank, blessedstar, 255);
    inv_add(bank, studded_body, 255);
    inv_add(bank, studded_chaps, 255);
    inv_add(bank, coins, ^max_32bit_int);
} else {
    @please_finish;
}

[debugproc,magicbank]
if_close;
if (p_finduid(uid) = true) {
    if (map_members = ^false) {
        mes(^mes_members_feature);
        return;
    }
    def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
    if ($choice = 2) {
        return;
    }

    inv_clear(bank);
    inv_add(bank, airrune, 10000);
    inv_add(bank, waterrune, 10000);
    inv_add(bank, earthrune, 10000);
    inv_add(bank, firerune, 10000);
    inv_add(bank, mindrune, 10000);
    inv_add(bank, cosmicrune, 10000);
    inv_add(bank, deathrune, 10000);
    inv_add(bank, naturerune, 10000);
    inv_add(bank, bodyrune, 10000);
    inv_add(bank, chaosrune, 10000);
    inv_add(bank, lawrune, 10000);
    inv_add(bank, bloodrune, 10000);
    inv_add(bank, soulrune, 10000);
    inv_add(bank, saradomin_staff, 10000);
    inv_add(bank, zamorak_staff, 10000);
    inv_add(bank, guthix_staff, 10000);
    inv_add(bank, ibanstaff, 10000);
    inv_add(bank, staff_of_air, 10000);
    inv_add(bank, staff_of_water, 10000);
    inv_add(bank, staff_of_earth, 10000);
    inv_add(bank, staff_of_fire, 10000);
    inv_add(bank, air_battlestaff, 10000);
    inv_add(bank, water_battlestaff, 10000);
    inv_add(bank, earth_battlestaff, 10000);
    inv_add(bank, fire_battlestaff, 10000);
    inv_add(bank, stafforb, 10000);
    inv_add(bank, strung_sapphire_amulet, 10000);
    inv_add(bank, sapphire_ring, 10000);
    inv_add(bank, strung_emerald_amulet, 10000);
    inv_add(bank, emerald_ring, 10000);
    inv_add(bank, strung_ruby_amulet, 10000);
    inv_add(bank, ruby_ring, 10000);
    inv_add(bank, strung_diamond_amulet, 10000);
    inv_add(bank, diamond_ring, 10000);
    inv_add(bank, strung_dragonstone_amulet, 10000);
    inv_add(bank, dragonstone_ring, 10000);
    // add ores for superheating
    inv_add(bank, tin_ore, 10000);
    inv_add(bank, copper_ore, 10000);
    inv_add(bank, iron_ore, 10000);
    inv_add(bank, silver_ore, 10000);
    inv_add(bank, coal, 10000);
    inv_add(bank, gold_ore, 10000);
    inv_add(bank, mithril_ore, 10000);
    inv_add(bank, adamantite_ore, 10000);
    inv_add(bank, runite_ore, 10000);
} else {
    @please_finish;
}

[debugproc,clearbank]
if_close;
if (p_finduid(uid) = true) {
    inv_clear(bank);
} else {
    @please_finish;
}

[debugproc,fmbank]
if_close;
if (p_finduid(uid) = true) {
    if (map_members = ^false) {
        mes(^mes_members_feature);
        return;
    }
    def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
    if ($choice = 2) {
        return;
    }

    inv_clear(bank);

    inv_add(bank, tinderbox, 10);
    inv_add(bank, logs, 10000);
    inv_add(bank, magic_logs, 10000);
    inv_add(bank, yew_logs, 10000);
    inv_add(bank, maple_logs, 10000);
    inv_add(bank, willow_logs, 10000);
    inv_add(bank, oak_logs, 10000);
} else {
    @please_finish;
}

[debugproc,foodbank]
if_close;
if (p_finduid(uid) = true) {
    if (map_members = ^false) {
        mes(^mes_members_feature);
        return;
    }
    def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
    if ($choice = 2) {
        return;
    }

    inv_clear(bank);

    inv_add(bank, cooked_chompy, 100);
    inv_add(bank, cooked_ugthanki_meat, 100);
    inv_add(bank, cooked_chicken, 100);
    inv_add(bank, cooked_meat, 100);
    inv_add(bank, macro_triffidfruit, 100);
    inv_add(bank, pumpkin, 100);
    inv_add(bank, easter_egg, 100);
    inv_add(bank, banana, 100);
    inv_add(bank, cabbage, 100);
    inv_add(bank, magic_cabbage, 100);
    inv_add(bank, spinach_roll, 100);
    inv_add(bank, kebab, 100);
    inv_add(bank, rottenapples, 100);
    inv_add(bank, lava_eel, 100);
    inv_add(bank, cake, 100);
    inv_add(bank, partial_cake, 100);
    inv_add(bank, cake_slice, 100);
    inv_add(bank, chocolate_cake, 100);
    inv_add(bank, partial_chocolate_cake, 100);
    inv_add(bank, chocolate_slice, 100);
    inv_add(bank, chocolate_bar, 100);
    inv_add(bank, bread, 100);
    inv_add(bank, premade_worm_batta, 100);
    inv_add(bank, premade_toad_batta, 100);
    inv_add(bank, premade_cheese_tom_batta, 100);
    inv_add(bank, premade_fruit_batta, 100);
    inv_add(bank, premade_vegetable_batta, 100);
    inv_add(bank, spoilt_batta, 100);
    inv_add(bank, unfinished_worm_batta, 100);
    inv_add(bank, worm_batta, 100);
    inv_add(bank, toad_batta, 100);
    inv_add(bank, unfinished_cheese_tom_batta1, 100);
    inv_add(bank, cheese_tom_batta, 100);
    inv_add(bank, fruitless_batta, 100);
    inv_add(bank, fruit_batta_lime, 100);
    inv_add(bank, fruit_batta_orange, 100);
    inv_add(bank, fruit_batta_pineapple, 100);
    inv_add(bank, fruit_batta_limeorange, 100);
    inv_add(bank, fruit_batta_limepineapple, 100);
    inv_add(bank, fruit_batta_orangepineapple, 100);
    inv_add(bank, unfinished_fruit_batta, 100);
    inv_add(bank, fruit_batta, 100);
    inv_add(bank, unfinished_vegetable_batta, 100);
    inv_add(bank, vegetable_batta, 100);
    inv_add(bank, lemon, 100);
    inv_add(bank, lemon_chunks, 100);
    inv_add(bank, lemon_slices, 100);
    inv_add(bank, orange, 100);
    inv_add(bank, orange_chunks, 100);
    inv_add(bank, orange_slices, 100);
    inv_add(bank, pineapple, 100);
    inv_add(bank, pineapple_chunks, 100);
    inv_add(bank, pineapple_ring, 100);
    inv_add(bank, lime, 100);
    inv_add(bank, lime_chunks, 100);
    inv_add(bank, lime_slices, 100);
    inv_add(bank, worm_crunchies, 100);
    inv_add(bank, chocchip_crunchies, 100);
    inv_add(bank, spicy_crunchies, 100);
    inv_add(bank, toad_crunchies, 100);
    inv_add(bank, spoilt_crunchies, 100);
    inv_add(bank, unfinished_worm_crunchies, 100);
    inv_add(bank, premade_worm_crunchies, 100);
    inv_add(bank, unfinished_chocchip_crunchies, 100);
    inv_add(bank, premade_chocchip_crunchies, 100);
    inv_add(bank, unfinished_spicy_crunchies, 100);
    inv_add(bank, premade_spicy_crunchies, 100);
    inv_add(bank, unfinished_toad_crunchies, 100);
    inv_add(bank, premade_toad_crunchies, 100);
    inv_add(bank, dwellberry, 100);
    inv_add(bank, equa_leaves, 100);
    inv_add(bank, pot_of_cream, 100);
    inv_add(bank, toads_legs, 100);
    inv_add(bank, equa_toads_legs, 100);
    inv_add(bank, spicy_toads_legs, 100);
    inv_add(bank, seasoned_toads_legs, 100);
    inv_add(bank, spicy_worm, 100);
    inv_add(bank, king_worm, 100);
    inv_add(bank, premade_chocolate_bomb, 100);
    inv_add(bank, premade_tangled_toads_legs, 100);
    inv_add(bank, premade_worm_hole, 100);
    inv_add(bank, premade_veg_ball, 100);
    inv_add(bank, chocolate_bomb, 100);
    inv_add(bank, tangled_toads_legs, 100);
    inv_add(bank, worm_hole, 100);
    inv_add(bank, veg_ball, 100);
    inv_add(bank, spoilt_gnomebowl, 100);
    inv_add(bank, unfinished_chocolate_bomb1, 100);
    inv_add(bank, unfinished_chocolate_bomb2, 100);
    inv_add(bank, unfinished_chocolate_bomb3, 100);
    inv_add(bank, unfinished_worm_hole, 100);
    inv_add(bank, unfinished_veg_ball, 100);
    inv_add(bank, cooked_oomlie, 100);
    inv_add(bank, apple_pie, 100);
    inv_add(bank, redberry_pie, 100);
    inv_add(bank, meat_pie, 100);
    inv_add(bank, half_a_meat_pie, 100);
    inv_add(bank, half_a_redberry_pie, 100);
    inv_add(bank, half_an_apple_pie, 100);
    inv_add(bank, half_plain_pizza, 100);
    inv_add(bank, meat_pizza, 100);
    inv_add(bank, half_meat_pizza, 100);
    inv_add(bank, anchovie_pizza, 100);
    inv_add(bank, half_anchovie_pizza, 100);
    inv_add(bank, pineapple_pizza, 100);
    inv_add(bank, half_pineapple_pizza, 100);
    inv_add(bank, plain_pizza, 100);
    inv_add(bank, tomato, 100);
    inv_add(bank, cheese, 100);
    inv_add(bank, stew, 100);
    inv_add(bank, curry, 100);
    inv_add(bank, ugthanki_kebab_bad, 100);
    inv_add(bank, ugthanki_kebab, 100);
    inv_add(bank, shrimp, 100);
    inv_add(bank, anchovies, 100);
    inv_add(bank, sardine, 100);
    inv_add(bank, salmon, 100);
    inv_add(bank, trout, 100);
    inv_add(bank, giant_carp, 100);
    inv_add(bank, cod, 100);
    inv_add(bank, herring, 100);
    inv_add(bank, pike, 100);
    inv_add(bank, mackerel, 100);
    inv_add(bank, tuna, 100);
    inv_add(bank, bass, 100);
    inv_add(bank, swordfish, 100);
    inv_add(bank, lobster, 100);
    inv_add(bank, shark, 100);
    inv_add(bank, mantaray, 100);
    inv_add(bank, seaturtle, 100);
    inv_add(bank, edible_seaweed, 100);
    inv_add(bank, jangerberries, 100);
    inv_add(bank, blamish_oil, 100);
    inv_add(bank, display_tea, 100);
    inv_add(bank, bravery_pot, 100);
    inv_add(bank, asgarnian_ale, 100);
    inv_add(bank, wizards_mind_bomb, 100);
    inv_add(bank, greenmans_ale, 100);
    inv_add(bank, dragon_bitter, 100);
    inv_add(bank, dwarven_stout, 100);
    inv_add(bank, grog, 100);
    inv_add(bank, beer, 100);
    inv_add(bank, chocolaty_milk, 100);
    inv_add(bank, cup_of_tea, 100);
    inv_add(bank, vodka, 100);
    inv_add(bank, whisky, 100);
    inv_add(bank, gin, 100);
    inv_add(bank, brandy, 100);
    inv_add(bank, premade_blurberry_special, 100);
    inv_add(bank, premade_chocolate_saturday, 100);
    inv_add(bank, premade_drunk_dragon, 100);
    inv_add(bank, premade_fruit_blast, 100);
    inv_add(bank, pineapple_punch, 100);
    inv_add(bank, premade_sgg, 100);
    inv_add(bank, premade_wizard_blizzard, 100);
    inv_add(bank, unfinished_pineapple_punch1, 100);
    inv_add(bank, unfinished_pineapple_punch2, 100);
    inv_add(bank, unfinished_pineapple_punch3, 100);
    inv_add(bank, pineapple_punch, 100);
    inv_add(bank, unfinished_wizard_blizzard1, 100);
    inv_add(bank, unfinished_wizard_blizzard2, 100);
    inv_add(bank, wizard_blizzard, 100);
    inv_add(bank, unfinished_blurberry_special1, 100);
    inv_add(bank, unfinished_blurberry_special2, 100);
    inv_add(bank, unfinished_blurberry_special3, 100);
    inv_add(bank, unfinished_blurberry_special4, 100);
    inv_add(bank, blurberry_special, 100);
    inv_add(bank, unfinished_chocolate_saturday1, 100);
    inv_add(bank, unfinished_chocolate_saturday2, 100);
    inv_add(bank, unfinished_chocolate_saturday3, 100);
    inv_add(bank, unfinished_chocolate_saturday4, 100);
    inv_add(bank, chocolate_saturday, 100);
    inv_add(bank, unfinished_sgg1, 100);
    inv_add(bank, unfinished_sgg2, 100);
    inv_add(bank, sgg, 100);
    inv_add(bank, unfinished_fruit_blast1, 100);
    inv_add(bank, fruit_blast, 100);
    inv_add(bank, unfinished_drunk_dragon1, 100);
    inv_add(bank, unfinished_drunk_dragon2, 100);
    inv_add(bank, unfinished_drunk_dragon3, 100);
    inv_add(bank, drunk_dragon, 100);
    inv_add(bank, spoilt_cocktail, 100);
    inv_add(bank, spoilt_cocktail_fruity, 100);
    inv_add(bank, spoilt_cocktail_creamy, 100);
    inv_add(bank, spoilt_cocktail_slice, 100);
    inv_add(bank, jug_bad_wine, 100);
    inv_add(bank, jug_wine, 100);
    inv_add(bank, half_full_wine_jug, 100);
    inv_add(bank, strength4, 100);
    inv_add(bank, 3dose1strength, 100);
    inv_add(bank, 2dose1strength, 100);
    inv_add(bank, 1dose1strength, 100);
    inv_add(bank, 3dose1attack, 100);
    inv_add(bank, 2dose1attack, 100);
    inv_add(bank, 1dose1attack, 100);
    inv_add(bank, 4dosestatrestore, 100);
    inv_add(bank, 2dosestatrestore, 100);
    inv_add(bank, 1dosestatrestore, 100);
    inv_add(bank, 3dose1defense, 100);
    inv_add(bank, 2dose1defense, 100);
    inv_add(bank, 1dose1defense, 100);
    inv_add(bank, 3doseprayerrestore, 100);
    inv_add(bank, 2doseprayerrestore, 100);
    inv_add(bank, 1doseprayerrestore, 100);
    inv_add(bank, 3dose2attack, 100);
    inv_add(bank, 2dose2attack, 100);
    inv_add(bank, 1dose2attack, 100);
    inv_add(bank, 3dosefisherspotion, 100);
    inv_add(bank, 2dosefisherspotion, 100);
    inv_add(bank, 1dosefisherspotion, 100);
    inv_add(bank, 3dose2strength, 100);
    inv_add(bank, 2dose2strength, 100);
    inv_add(bank, 1dose2strength, 100);
    inv_add(bank, 3dose2defense, 100);
    inv_add(bank, 2dose2defense, 100);
    inv_add(bank, 1dose2defense, 100);
    inv_add(bank, 3doserangerspotion, 100);
    inv_add(bank, 2doserangerspotion, 100);
    inv_add(bank, 1doserangerspotion, 100);
    inv_add(bank, 3doseantipoison, 100);
    inv_add(bank, 2doseantipoison, 100);
    inv_add(bank, 1doseantipoison, 100);
    inv_add(bank, 3dose2antipoison, 100);
    inv_add(bank, 2dose2antipoison, 100);
    inv_add(bank, 1dose2antipoison, 100);
    inv_add(bank, 3dosepotionofzamorak, 100);
    inv_add(bank, 2dosepotionofzamorak, 100);
    inv_add(bank, 1dosepotionofzamorak, 100);
    inv_add(bank, 4dose1attack, 100);
    inv_add(bank, 4dosestatrestore, 100);
    inv_add(bank, 4dose1defense, 100);
    inv_add(bank, 4doseprayerrestore, 100);
    inv_add(bank, 4dose2attack, 100);
    inv_add(bank, 4dosefisherspotion, 100);
    inv_add(bank, 4dose2strength, 100);
    inv_add(bank, 4dose2defense, 100);
    inv_add(bank, 4doserangerspotion, 100);
    inv_add(bank, 4doseantipoison, 100);
    inv_add(bank, 4dose1antidragon, 100);
    inv_add(bank, poison_chalice, 100);
} else {
    @please_finish;
}

[debugproc,fletchbank]
if_close;
if (p_finduid(uid) = true) {
    if (map_members = ^false) {
        mes(^mes_members_feature);
        return;
    }
    def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
    if ($choice = 2) {
        return;
    }

    inv_clear(bank);

    // add a bunch of fletch items to bank
    inv_add(bank, knife, 1000);
    inv_add(bank, arrow_shaft, 1000);
    inv_add(bank, headless_arrow, 1000);
    inv_add(bank, feather, 1000);
    inv_add(bank, bronze_arrowheads, 1000);
    inv_add(bank, iron_arrowheads, 1000);
    inv_add(bank, steel_arrowheads, 1000);
    inv_add(bank, mithril_arrowheads, 1000);
    inv_add(bank, adamant_arrowheads, 1000);
    inv_add(bank, rune_arrowheads, 1000);
    inv_add(bank, bronze_dart_tip, 1000);
    inv_add(bank, iron_dart_tip, 1000);
    inv_add(bank, steel_dart_tip, 1000);
    inv_add(bank, mithril_dart_tip, 1000);
    inv_add(bank, adamant_dart_tip, 1000);
    inv_add(bank, rune_dart_tip, 1000);
    inv_add(bank, bolt, 1000);
    inv_add(bank, opal_bolttips, 1000);
    inv_add(bank, pearl_bolttips, 1000);
    inv_add(bank, barbed_bolttips, 1000);
    inv_add(bank, unstrung_longbow, 1000);
    inv_add(bank, unstrung_shortbow, 1000);
    inv_add(bank, unstrung_oak_shortbow, 1000);
    inv_add(bank, unstrung_oak_longbow, 1000);
    inv_add(bank, unstrung_willow_longbow, 1000);
    inv_add(bank, unstrung_willow_shortbow, 1000);
    inv_add(bank, unstrung_maple_longbow, 1000);
    inv_add(bank, unstrung_maple_shortbow, 1000);
    inv_add(bank, unstrung_yew_longbow, 1000);
    inv_add(bank, unstrung_yew_shortbow, 1000);
    inv_add(bank, unstrung_magic_longbow, 1000);
    inv_add(bank, unstrung_magic_shortbow, 1000);
    //add logs
    inv_add(bank, logs, 1000);
    inv_add(bank, oak_logs, 1000);
    inv_add(bank, willow_logs, 1000);
    inv_add(bank, maple_logs, 1000);
    inv_add(bank, yew_logs, 1000);
    inv_add(bank, magic_logs, 1000);
    // bow string
    inv_add(bank, bow_string, 1000);
    //ogre
    inv_add(bank, achey_tree_logs, 1000);
    inv_add(bank, ogre_arrow_shaft, 1000);
    inv_add(bank, ogre_headless_arrow, 1000);
    inv_add(bank, wolf_bones, 1000);
    inv_add(bank, chisel, 1000);
}

[debugproc,wptest]
if_close;
if (p_finduid(uid) = true) {
    if (map_members = ^false) {
        mes(^mes_members_feature);
        return;
    }
    def_int $choice = ~p_choice2_header("Yes.", 1, "No.", 2, "This clears your bank. Continue?");
    if ($choice = 2) {
        return;
    }

    inv_clear(bank);

    inv_add(bank, weapon_poison, 10000);
    inv_add(bank, bronze_dagger, 1000);
    inv_add(bank, iron_dagger, 1000);
    inv_add(bank, steel_dagger, 1000);
    inv_add(bank, mithril_dagger, 1000);
    inv_add(bank, adamant_dagger, 1000);
    inv_add(bank, rune_dagger, 1000);
    inv_add(bank, dragon_dagger, 1000);
    inv_add(bank, black_dagger, 1000);

    inv_add(bank, bronze_arrow, 1000);
    inv_add(bank, iron_arrow, 1000);
    inv_add(bank, steel_arrow, 1000);
    inv_add(bank, mithril_arrow, 1000);
    inv_add(bank, adamant_arrow, 1000);
    inv_add(bank, rune_arrow, 1000);

    inv_add(bank, bolt, 1000);

    inv_add(bank, bronze_spear, 1000);
    inv_add(bank, iron_spear, 1000);
    inv_add(bank, steel_spear, 1000);
    inv_add(bank, mithril_spear, 1000);
    inv_add(bank, adamant_spear, 1000);
    inv_add(bank, rune_spear, 1000);
    inv_add(bank, dragon_spear, 1000);

    inv_add(bank, bronze_knife, 1000);
    inv_add(bank, iron_knife, 1000);
    inv_add(bank, steel_knife, 1000);
    inv_add(bank, mithril_knife, 1000);
    inv_add(bank, adamant_knife, 1000);
    inv_add(bank, rune_knife, 1000);

    inv_add(bank, bronze_dart, 1000);
    inv_add(bank, iron_dart, 1000);
    inv_add(bank, steel_dart, 1000);
    inv_add(bank, mithril_dart, 1000);
    inv_add(bank, adamant_dart, 1000);
    inv_add(bank, rune_dart, 1000);

    inv_add(bank, bronze_javelin, 1000);
    inv_add(bank, iron_javelin, 1000);
    inv_add(bank, steel_javelin, 1000);
    inv_add(bank, mithril_javelin, 1000);
    inv_add(bank, adamant_javelin, 1000);
    inv_add(bank, rune_javelin, 1000);
}