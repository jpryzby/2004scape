[debugproc,mine_gems]
mes("Mine Gems");

while(~gem_gear_check = true){
    ~mine_all_gems();
    ~chisel1();
    ~chisel2();
    ~deposit_gems();
}





[proc,gem_gear_check]()(boolean)
def_boolean $gear_check1 = ~gear_check(rune_pickaxe, 3, "rune_pickaxe");
def_boolean $gear_check2 = ~inv_check(chisel, "chisel");
def_boolean $gear_check3 = ~inv_check(opal_bolttips, "opal_bolttips");

if($gear_check1 = true & $gear_check2 = true & $gear_check3 = true){
    return(true);
}else{
    return(false);
}


[proc,mine_all_gems]
~bot_mine(0_44_46_9_59, 0_44_46_9_58, gemrock);
~bot_mine(0_44_46_9_57, 0_44_46_9_58, gemrock);
~bot_mine(0_44_46_7_58, 0_44_46_8_58, gemrock);
~bot_mine(0_44_46_7_55, 0_44_46_7_56, gemrock);
~bot_mine(0_44_46_5_56, 0_44_46_6_56, gemrock);
~bot_mine(0_44_46_5_54, 0_44_46_5_55, gemrock);
~bot_mine(0_44_46_4_54, 0_44_46_4_55, gemrock);



[proc,bot_mine](coord $rockCoord, coord $miningCoord, loc $rock)
while(loc_find($rockCoord,$rock) = false){
    world_delay(1);
}
if(loc_find($rockCoord,$rock) = true & inv_freespace(inv) > 0){
    ~botwalk($miningCoord);

    def_int $time = map_clock;
    ~bot_oploc($rockCoord,$rock,1);
    while(loc_find($rockCoord,$rock) = true & inv_freespace(inv) > 0){
        world_delay(1);
        if(calc($time + 100) < map_clock){
            ~bot_oploc($rockCoord,$rock,1);
            $time = map_clock;
        }
    }
    if_close;
}



[proc,chisel1]
def_int $slot = 2;
while($slot < 9){
    mes("crafting slot <tostring($slot)>");
    def_obj $item = inv_getobj(inv, $slot);
    
    if($item ! null){
        if($item = uncut_opal | $item = uncut_jade | $item = uncut_red_topaz){
            if(p_finduid(uid) = true){
                ~crafting_gem($item);
                world_delay(3);
            }
        }
    }
    
    $slot = calc($slot + 1);
}



[proc,chisel2]
def_int $slot = 2;
while($slot < 9){
    def_obj $item = inv_getobj(inv, $slot);

    if($item ! null){
        if($item = opal){
            if(p_finduid(uid) = true){
                ~make_bolt_tips($item);
                world_delay(3);
            }
        }else{
            if($item = jade | $item = red_topaz | $item = crushed_gemstone){
                if(p_finduid(uid) = true){
                    inv_dropslot(inv,coord,$slot,200);
                    world_delay(1);
                }
            }
        }
    }

    $slot = calc($slot + 1);
}



[proc,deposit_gems]
//walk to bank
~botrun(50,999,true);
~botwalk(0_44_46_36_11);

if(npc_find(coord, shilobanker, 6, 0) = true & p_finduid(uid) = true){
    ~openbank;
    world_delay(1);
    
    def_int $slot = 2;
    while($slot < 9){
        def_obj $item = inv_getobj(inv,$slot);
        if($item ! null){
            ~bank_deposit_request(inv, $item, 999, $slot);
            world_delay(1);
        }
        $slot = calc($slot + 1);
    }
}
if_close;

//walk back to rocks
~botwalk(0_44_46_9_58);






[proc,crafting_gem](obj $uncut_gem)
if (oc_members($uncut_gem) = true) {
    if (map_members = ^false) {
        mes(^mes_members_feature);
        return;
    }
}
db_find(gem_cutting_table:uncut_gem, $uncut_gem);
def_dbrow $data = db_findnext;
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
// check if the player has the required level
def_int $level = db_getfield($data, gem_cutting_table:level, 0);
def_namedobj $cut_gem = db_getfield($data, gem_cutting_table:cut_gem, 0);
if (stat(crafting) < $level) {
    def_string $level_fail_name = db_getfield($data, gem_cutting_table:level_fail_name, 0);
    if (string_length($level_fail_name) < 1) {
        $level_fail_name = "<lowercase(oc_name($cut_gem))>s";
    }
    ~objbox($uncut_gem, "You need a Crafting level of <tostring($level)> to cut <$level_fail_name>.", 250, 0, divide(^objbox_height, 2));
    return;
}
anim(db_getfield($data, gem_cutting_table:skill_anim, 0), 0);
sound_synth(chisel, 0, 0);

inv_del(inv, $uncut_gem, 1);

def_string $product_name = db_getfield($data, gem_cutting_table:product_name, 0);
if (string_length($product_name) < 1) {
    $product_name = oc_name($cut_gem);
}

def_int $low;
def_int $high;
$low, $high = db_getfield($data, gem_cutting_table:success_rate, 0);
if ($low ! null & $high ! null & stat_random(crafting, $low, $high) = false) {
    // they prob hardcode this but this is easier
    stat_advance(crafting, calc((db_getfield($data, gem_cutting_table:experience, 0) + 2)/4));
    // osrs except uppercase product name. needs confirmation
    mes("You mis-hit the chisel and smash the <$product_name> to pieces!");
    inv_add(inv, crushed_gemstone, 1);
    return;
}

mes("You cut the <$product_name>.");
inv_add(inv, $cut_gem, 1);
stat_advance(crafting, db_getfield($data, gem_cutting_table:experience, 0));



[proc,make_bolt_tips](obj $item)
if (map_members = ^false) {
    mes(^mes_members_fletching); // guess
    return;
}
def_dbrow $data = ~get_fletching_data($item);
if ($data = null) {
    ~displaymessage(^dm_default);
    return;
}
def_int $level = db_getfield($data, fletching_table:level, 0);
if (stat(fletching) < $level) {
    // osrs
    ~mesbox("You need a Fletching level of <tostring($level)> to do that.");
    return;
}
inv_del(inv, $item, 1);
// includes count
inv_add(inv, db_getfield($data, fletching_table:product, 0));
stat_advance(fletching, db_getfield($data, fletching_table:experience, 0));
// osrs
def_seq $anim = db_getfield($data, fletching_table:skill_anim, 0);
def_synth $sound = db_getfield($data, fletching_table:skill_sound, 0);
if ($anim ! null) {
    anim($anim, 0);
}
if ($sound ! null) {
    sound_synth($sound,0 , 0);
}
mes("You use your chisel to fletch small bolt tips.");


